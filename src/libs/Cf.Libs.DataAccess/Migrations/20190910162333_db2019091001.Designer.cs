// <auto-generated />
using System;
using Cf.Libs.DataAccess.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Cf.Libs.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190910162333_db2019091001")]
    partial class db2019091001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime>("LastPasswordChanged");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("RoleId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("District");

                    b.Property<int>("DistrictId");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Phone");

                    b.Property<string>("Province");

                    b.Property<int>("ProvinceId");

                    b.Property<string>("Street");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ward");

                    b.Property<int>("WardId");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Prefix");

                    b.Property<int>("ProvinceId");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 579, DateTimeKind.Local).AddTicks(6596),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Huế",
                            Prefix = "Tp",
                            ProvinceId = 1,
                            SortOrder = 1,
                            UpdatedToken = "fbdb0ec0-59d0-4227-a9c1-b7d43d0f22f6"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 579, DateTimeKind.Local).AddTicks(9529),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Liên Chiểu",
                            Prefix = "Quận",
                            ProvinceId = 2,
                            SortOrder = 1,
                            UpdatedToken = "68d7b0a8-625b-44c1-9eae-b992969beaa0"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Prefix");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 576, DateTimeKind.Local).AddTicks(791),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Huế",
                            Prefix = "",
                            SortOrder = 1,
                            UpdatedToken = "374a0e33-501a-4291-a19e-b9baa2cfe219"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 579, DateTimeKind.Local).AddTicks(9488),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Đà Nẵng",
                            Prefix = "",
                            SortOrder = 1,
                            UpdatedToken = "035a81dc-159c-42a2-9a46-4489f12e0eac"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DistrictId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Prefix");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Ward");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 579, DateTimeKind.Local).AddTicks(9272),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "An Hòa",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "b7d64c8a-d753-4c3b-a41d-22b74f722a39"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 579, DateTimeKind.Local).AddTicks(9312),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Phú Bình",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "99277828-4996-445c-8f24-cb551d92b993"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 579, DateTimeKind.Local).AddTicks(9317),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Phú Hòa",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "4a8e2fe3-19ed-4f45-8715-7126b89d9099"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 579, DateTimeKind.Local).AddTicks(9321),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Phú Thuận",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "54176638-c2d0-43c2-b672-cd42d29f217c"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 579, DateTimeKind.Local).AddTicks(9335),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Tây Lộc",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "84a3b82e-2f98-49aa-a5e1-b73e346bc137"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 579, DateTimeKind.Local).AddTicks(9546),
                            CreateUserId = "system",
                            DistrictId = 2,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Hòa Khánh Bắc",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "4572f753-780f-420d-a30c-6e1869322ec8"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 579, DateTimeKind.Local).AddTicks(9549),
                            CreateUserId = "system",
                            DistrictId = 2,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Hòa Khánh Nam",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "fad2e22c-d756-407d-8bdb-926b9effa5a2"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Configuration.Setting", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreateUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ModifyUserId");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<string>("UpdatedToken");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = "bdb73d73-7264-4f5b-8936-0fa1bf361918",
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 586, DateTimeKind.Local).AddTicks(1774),
                            CreateUserId = "system",
                            IsDeleted = false,
                            Name = "Company",
                            UpdatedToken = "ee09ce83-eb94-4776-b3d7-854290847808",
                            Value = "{\"Brand\":\"GIẶT SẠCH\",\"Logo\":\"https://i.imgur.com/1CXl1BP.png\",\"Name\":\"Công Ty TNHH Thương Mại Công Nghệ GIAT SACH\",\"Address\":\"201/2, Lê Văn Việt, Quận 9, Hồ Chí Minh\",\"Email\":\"giatsach.vn@outlook.com\",\"Phone\":\"0866.667.670\",\"Website\":\"giatsach.vn\",\"Copyright\":\"<h4>Copyright © 2019 GiatSach</h4>\",\"Facebook\":\"https://www.facebook.com/giatsach.vn\",\"Instagram\":\"https://www.instagram.com/giatsach.vn\",\"Youtube\":\"https://www.youtube.com/giatsach.vn\",\"AppStore\":\"https://www.facebook.com/giatsach.vn\",\"GooglePlay\":\"https://www.facebook.com/giatsach.vn\",\"GoogleMap\":\" \"}"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("Combo");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description");

                    b.Property<bool>("Highlight");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Combo");

                    b.ToTable("Item");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Combo = 10,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 587, DateTimeKind.Local).AddTicks(2340),
                            CreateUserId = "system",
                            Description = "<ul class=\"content\"><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li></ul>",
                            Highlight = false,
                            IsDeleted = false,
                            Name = "Giặt thường 1",
                            SortOrder = 1,
                            Type = "Laundry",
                            UpdatedToken = "4e9fbd58-377a-4539-992f-7a6e23e065c6"
                        },
                        new
                        {
                            Id = 2,
                            Combo = 11,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 587, DateTimeKind.Local).AddTicks(2389),
                            CreateUserId = "system",
                            Description = "<ul class=\"content\"><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li></ul>",
                            Highlight = false,
                            IsDeleted = false,
                            Name = "Giặt thường 2",
                            SortOrder = 1,
                            Type = "Laundry",
                            UpdatedToken = "49a3d9dd-a0e9-4d45-837b-a84409058f7c"
                        },
                        new
                        {
                            Id = 3,
                            Combo = 12,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 587, DateTimeKind.Local).AddTicks(2395),
                            CreateUserId = "system",
                            Description = "<ul class=\"content\"><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li></ul>",
                            Highlight = false,
                            IsDeleted = false,
                            Name = "Giặt thường 3",
                            SortOrder = 1,
                            Type = "Laundry",
                            UpdatedToken = "164cb6a1-6e66-46d7-8aa4-f6ba9ea4764e"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Method", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description");

                    b.Property<bool>("EnableDiscount");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Method");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 581, DateTimeKind.Local).AddTicks(3965),
                            CreateUserId = "system",
                            Description = "Giặt hấp",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Giặt hấp",
                            SortOrder = 1,
                            Type = "Clean",
                            UpdatedToken = "180564ac-b2f9-43b6-ac23-5610ebba2694"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 581, DateTimeKind.Local).AddTicks(4012),
                            CreateUserId = "system",
                            Description = "Giặt sấy",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Giặt sấy",
                            SortOrder = 1,
                            Type = "Clean",
                            UpdatedToken = "12296aa6-9c73-46f3-98cc-03d6e479984a"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 581, DateTimeKind.Local).AddTicks(4019),
                            CreateUserId = "system",
                            Description = "Chỉ giặt",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Chỉ giặt",
                            SortOrder = 1,
                            Type = "Clean",
                            UpdatedToken = "1dc48057-7023-45c5-8698-398f32c13239"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 581, DateTimeKind.Local).AddTicks(4045),
                            CreateUserId = "system",
                            Description = "Chỉ sấy",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Chỉ sấy",
                            SortOrder = 1,
                            Type = "Dry",
                            UpdatedToken = "17b14e9c-d4a8-4a6a-b250-d1bbde54edad"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 581, DateTimeKind.Local).AddTicks(4051),
                            CreateUserId = "system",
                            Description = "Comfort",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Comfort",
                            SortOrder = 1,
                            Type = "Soft",
                            UpdatedToken = "636a2851-6503-48c5-8853-0e0e31f419a2"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 581, DateTimeKind.Local).AddTicks(4132),
                            CreateUserId = "system",
                            Description = "Downy",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Downy",
                            SortOrder = 1,
                            Type = "Soft",
                            UpdatedToken = "5d3a48f0-5ba4-473e-979c-374a9e31269b"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 581, DateTimeKind.Local).AddTicks(4137),
                            CreateUserId = "system",
                            Description = "Ủi hơi nước miển phí",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Ủi hơi nước miển phí",
                            SortOrder = 1,
                            Type = "Straight",
                            UpdatedToken = "2327f8d4-4bc8-439c-8ab7-3c29d365b9dd"
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 581, DateTimeKind.Local).AddTicks(4142),
                            CreateUserId = "system",
                            Description = "<strong> Phí: </strong> 10.000đ <small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "7h - 11h",
                            SortOrder = 1,
                            Type = "Delivery",
                            UpdatedToken = "ff57a7e4-81e7-4c10-ba8e-60b56833d6ce"
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 581, DateTimeKind.Local).AddTicks(4147),
                            CreateUserId = "system",
                            Description = "<strong> Phí: </strong> 10.000đ <small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "13h - 15h",
                            SortOrder = 1,
                            Type = "Delivery",
                            UpdatedToken = "ce143a7a-d6c5-4f8e-ac96-c729614028b2"
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 581, DateTimeKind.Local).AddTicks(4153),
                            CreateUserId = "system",
                            Description = "<strong>10.000đ <small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "3kg / 1 lần giặt",
                            SortOrder = 1,
                            Type = "Delivery",
                            UpdatedToken = "bedb4946-47df-4eb3-8e39-73aae2a4c5c7"
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 581, DateTimeKind.Local).AddTicks(4158),
                            CreateUserId = "system",
                            Description = "<strong>Miễn phí vận chuyển </strong><small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "5kg / 1 lần giặt",
                            SortOrder = 1,
                            Type = "Combo",
                            UpdatedToken = "9cd8c6a8-6700-496e-b9c6-7db2ad9b1419"
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2019, 9, 10, 23, 23, 32, 581, DateTimeKind.Local).AddTicks(4166),
                            CreateUserId = "system",
                            Description = "<strong>Miễn phí vận chuyển</strong>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "10kg / 1 lần giặt",
                            SortOrder = 1,
                            Type = "Combo",
                            UpdatedToken = "362e4163-3e76-4702-a64b-46f8366d1536"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Discount");

                    b.Property<decimal>("DiscountRate");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemId");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<byte>("Priority");

                    b.Property<decimal>("Rate");

                    b.Property<byte>("Tax");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateOfReceipt");

                    b.Property<int>("DistrictId");

                    b.Property<string>("DistrictName");

                    b.Property<string>("FullName");

                    b.Property<string>("HoursOfReceipt");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("OrderCode");

                    b.Property<string>("Phone");

                    b.Property<int>("ProvinceId");

                    b.Property<string>("ProvinceName");

                    b.Property<string>("Street");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("WardId");

                    b.Property<string>("WardName");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MethodId");

                    b.Property<string>("MethodName");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("OrderId");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.RoleClaim", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.User", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserClaim", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserLogin", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserRole", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserToken", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.District", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Common.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Ward", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Common.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Item", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Items.Method", "Method")
                        .WithMany("Items")
                        .HasForeignKey("Combo");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.Order", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.OrderDetail", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Orders.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");
                });
#pragma warning restore 612, 618
        }
    }
}
