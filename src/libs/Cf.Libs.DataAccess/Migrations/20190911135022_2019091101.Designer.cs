// <auto-generated />
using System;
using Cf.Libs.DataAccess.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Cf.Libs.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190911135022_2019091101")]
    partial class _2019091101
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime>("LastPasswordChanged");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("RoleId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("District");

                    b.Property<int>("DistrictId");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Phone");

                    b.Property<string>("Province");

                    b.Property<int>("ProvinceId");

                    b.Property<string>("Street");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ward");

                    b.Property<int>("WardId");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Prefix");

                    b.Property<int>("ProvinceId");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 204, DateTimeKind.Local).AddTicks(9987),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Huế",
                            Prefix = "Tp",
                            ProvinceId = 1,
                            SortOrder = 1,
                            UpdatedToken = "53899ea7-d0d3-4a34-b103-55653f08beff"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 205, DateTimeKind.Local).AddTicks(2224),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Liên Chiểu",
                            Prefix = "Quận",
                            ProvinceId = 2,
                            SortOrder = 1,
                            UpdatedToken = "fc17924d-4e0b-4475-9eaa-22110c4ce799"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Prefix");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 202, DateTimeKind.Local).AddTicks(3722),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Huế",
                            Prefix = "",
                            SortOrder = 1,
                            UpdatedToken = "43d4596c-7f65-46d6-8ea1-96c7594b1b7f"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 205, DateTimeKind.Local).AddTicks(2174),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Đà Nẵng",
                            Prefix = "",
                            SortOrder = 1,
                            UpdatedToken = "0c084a58-51e8-4e08-aa9c-f297d768cf5c"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Name");

                    b.Property<string>("NewsId");

                    b.Property<string>("PostId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DistrictId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Prefix");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Ward");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 205, DateTimeKind.Local).AddTicks(1902),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "An Hòa",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "ddb7ddcd-b8c8-4efa-8a10-3b56c8bc0dcf"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 205, DateTimeKind.Local).AddTicks(1945),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Phú Bình",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "a6f7cfcd-0d0b-42eb-9716-2ee780b611f4"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 205, DateTimeKind.Local).AddTicks(1950),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Phú Hòa",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "258003c4-4f34-4e2c-91ba-14e9bf4052a3"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 205, DateTimeKind.Local).AddTicks(1954),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Phú Thuận",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "91acbe66-b5df-45d7-ae8a-8777e071455e"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 205, DateTimeKind.Local).AddTicks(1959),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Tây Lộc",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "6051d912-03b5-499b-a490-ca83e55bcb8a"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 205, DateTimeKind.Local).AddTicks(2243),
                            CreateUserId = "system",
                            DistrictId = 2,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Hòa Khánh Bắc",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "edd06453-e483-4560-b993-3eb367c3de82"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 205, DateTimeKind.Local).AddTicks(2247),
                            CreateUserId = "system",
                            DistrictId = 2,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Hòa Khánh Nam",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "2be7f62a-2fa0-40c3-94d2-b9936b8aa5a0"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Configuration.Setting", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreateUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ModifyUserId");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<string>("UpdatedToken");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = "74212e36-3968-4914-a6a6-933182737d12",
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 225, DateTimeKind.Local).AddTicks(7241),
                            CreateUserId = "system",
                            IsDeleted = false,
                            Name = "Company",
                            UpdatedToken = "7cf4eedf-cb0e-45dc-a5c3-6f996375e55b",
                            Value = "{\"Brand\":\"GIẶT SẠCH\",\"Logo\":\"https://i.imgur.com/1CXl1BP.png\",\"Name\":\"Công Ty TNHH Thương Mại Công Nghệ GIAT SACH\",\"Address\":\"201/2, Lê Văn Việt, Quận 9, Hồ Chí Minh\",\"Email\":\"giatsach.vn@outlook.com\",\"Phone\":\"0866.667.670\",\"Website\":\"giatsach.vn\",\"Copyright\":\"<h4>Copyright © 2019 GiatSach</h4>\",\"Facebook\":\"https://www.facebook.com/giatsach.vn\",\"Instagram\":\"https://www.instagram.com/giatsach.vn\",\"Youtube\":\"https://www.youtube.com/giatsach.vn\",\"AppStore\":\"https://www.facebook.com/giatsach.vn\",\"GooglePlay\":\"https://www.facebook.com/giatsach.vn\",\"GoogleMap\":\" \"}"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("Combo");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description");

                    b.Property<bool>("Highlight");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Combo");

                    b.ToTable("Item");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Combo = 10,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 227, DateTimeKind.Local).AddTicks(2372),
                            CreateUserId = "system",
                            Description = "<ul class=\"content\"><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li></ul>",
                            Highlight = false,
                            IsDeleted = false,
                            Name = "Giặt thường 1",
                            SortOrder = 1,
                            Type = "Laundry",
                            UpdatedToken = "3cc3988b-f7b3-4271-b45e-3087308c9796"
                        },
                        new
                        {
                            Id = 2,
                            Combo = 11,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 227, DateTimeKind.Local).AddTicks(2686),
                            CreateUserId = "system",
                            Description = "<ul class=\"content\"><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li></ul>",
                            Highlight = false,
                            IsDeleted = false,
                            Name = "Giặt thường 2",
                            SortOrder = 1,
                            Type = "Laundry",
                            UpdatedToken = "28c3719e-8910-4fd2-9021-142645b1c398"
                        },
                        new
                        {
                            Id = 3,
                            Combo = 12,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 227, DateTimeKind.Local).AddTicks(2698),
                            CreateUserId = "system",
                            Description = "<ul class=\"content\"><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li></ul>",
                            Highlight = false,
                            IsDeleted = false,
                            Name = "Giặt thường 3",
                            SortOrder = 1,
                            Type = "Laundry",
                            UpdatedToken = "4ab45082-5dc7-4cb3-9431-178fe7e54e30"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Method", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description");

                    b.Property<bool>("EnableDiscount");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Method");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 208, DateTimeKind.Local).AddTicks(374),
                            CreateUserId = "system",
                            Description = "Giặt hấp",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Giặt hấp",
                            SortOrder = 1,
                            Type = "Clean",
                            UpdatedToken = "338ebc3f-b73d-4484-b7a6-dc9a2338cf55"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 208, DateTimeKind.Local).AddTicks(488),
                            CreateUserId = "system",
                            Description = "Giặt sấy",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Giặt sấy",
                            SortOrder = 1,
                            Type = "Clean",
                            UpdatedToken = "dbc48a7e-dbc6-4664-92df-8f76bddb2767"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 208, DateTimeKind.Local).AddTicks(499),
                            CreateUserId = "system",
                            Description = "Chỉ giặt",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Chỉ giặt",
                            SortOrder = 1,
                            Type = "Clean",
                            UpdatedToken = "7ee265f6-16bb-49bb-9c01-9f7fe73f911d"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 208, DateTimeKind.Local).AddTicks(506),
                            CreateUserId = "system",
                            Description = "Chỉ sấy",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Chỉ sấy",
                            SortOrder = 1,
                            Type = "Dry",
                            UpdatedToken = "62c38865-5a0c-4e4e-b76a-08f16d32b93b"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 208, DateTimeKind.Local).AddTicks(526),
                            CreateUserId = "system",
                            Description = "Comfort",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Comfort",
                            SortOrder = 1,
                            Type = "Soft",
                            UpdatedToken = "959f7cf8-4aff-451f-bb66-0a6276dfbc22"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 208, DateTimeKind.Local).AddTicks(533),
                            CreateUserId = "system",
                            Description = "Downy",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Downy",
                            SortOrder = 1,
                            Type = "Soft",
                            UpdatedToken = "4985823a-16a4-4db3-89e2-eebdbd7d8ef5"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 208, DateTimeKind.Local).AddTicks(540),
                            CreateUserId = "system",
                            Description = "Ủi hơi nước miển phí",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Ủi hơi nước miển phí",
                            SortOrder = 1,
                            Type = "Straight",
                            UpdatedToken = "a0c23bd2-a722-4597-9591-d84a6e6c2370"
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 208, DateTimeKind.Local).AddTicks(547),
                            CreateUserId = "system",
                            Description = "<strong> Phí: </strong> 10.000đ <small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "7h - 11h",
                            SortOrder = 1,
                            Type = "Delivery",
                            UpdatedToken = "9ecc386a-d536-43b7-9b57-b6844d027270"
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 208, DateTimeKind.Local).AddTicks(553),
                            CreateUserId = "system",
                            Description = "<strong> Phí: </strong> 10.000đ <small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "13h - 15h",
                            SortOrder = 1,
                            Type = "Delivery",
                            UpdatedToken = "b8f83845-7be0-41cf-a2d4-9d8845f621e2"
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 208, DateTimeKind.Local).AddTicks(559),
                            CreateUserId = "system",
                            Description = "<strong>10.000đ <small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "3kg / 1 lần giặt",
                            SortOrder = 1,
                            Type = "Delivery",
                            UpdatedToken = "61196c18-8390-477e-98d1-a58eef7c8c21"
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 208, DateTimeKind.Local).AddTicks(567),
                            CreateUserId = "system",
                            Description = "<strong>Miễn phí vận chuyển </strong><small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "5kg / 1 lần giặt",
                            SortOrder = 1,
                            Type = "Combo",
                            UpdatedToken = "d3d761f9-d5fd-45b3-93a0-eb1b62f09dab"
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2019, 9, 11, 20, 50, 21, 208, DateTimeKind.Local).AddTicks(643),
                            CreateUserId = "system",
                            Description = "<strong>Miễn phí vận chuyển</strong>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "10kg / 1 lần giặt",
                            SortOrder = 1,
                            Type = "Combo",
                            UpdatedToken = "b4911049-46c7-4137-84ea-e0a577b5a43d"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Discount");

                    b.Property<decimal>("DiscountRate");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemId");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<byte>("Priority");

                    b.Property<decimal>("Rate");

                    b.Property<byte>("Tax");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.News.Post", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("PublishedDate");

                    b.Property<string>("Title");

                    b.Property<string>("UniqueUrl");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateOfReceipt");

                    b.Property<int>("DistrictId");

                    b.Property<string>("DistrictName");

                    b.Property<string>("FullName");

                    b.Property<string>("HoursOfReceipt");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("OrderCode");

                    b.Property<string>("Phone");

                    b.Property<int>("ProvinceId");

                    b.Property<string>("ProvinceName");

                    b.Property<string>("Street");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("WardId");

                    b.Property<string>("WardName");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MethodId");

                    b.Property<string>("MethodName");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("OrderId");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.RoleClaim", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.User", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserClaim", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserLogin", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserRole", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserToken", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.District", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Common.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Tag", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.News.Post", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Ward", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Common.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Item", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Items.Method", "Method")
                        .WithMany("Items")
                        .HasForeignKey("Combo");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.Order", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.OrderDetail", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Orders.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");
                });
#pragma warning restore 612, 618
        }
    }
}
