// <auto-generated />
using System;
using Cf.Libs.DataAccess.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Cf.Libs.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime>("LastPasswordChanged");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("RoleId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("District");

                    b.Property<int>("DistrictId");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Phone");

                    b.Property<string>("Province");

                    b.Property<int>("ProvinceId");

                    b.Property<string>("Street");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ward");

                    b.Property<int>("WardId");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Prefix");

                    b.Property<int>("ProvinceId");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 324, DateTimeKind.Local).AddTicks(8654),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Huế",
                            Prefix = "Tp",
                            ProvinceId = 1,
                            SortOrder = 1,
                            UpdatedToken = "0681a3a8-2829-4959-9e25-0453077013fa"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(47),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Liên Chiểu",
                            Prefix = "Quận",
                            ProvinceId = 2,
                            SortOrder = 1,
                            UpdatedToken = "9ee72bc8-3d1a-4a44-bcb0-d06f30c0d6ed"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Prefix");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 322, DateTimeKind.Local).AddTicks(7244),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Huế",
                            Prefix = "",
                            SortOrder = 1,
                            UpdatedToken = "dbc322a9-c2a7-4822-ac82-c1c5a045914c"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(14),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Đà Nẵng",
                            Prefix = "",
                            SortOrder = 1,
                            UpdatedToken = "66e5e27d-d4a0-494f-9779-2d17b063f823"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DistrictId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Prefix");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Ward");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 324, DateTimeKind.Local).AddTicks(9848),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "An Hòa",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "8692a509-0647-48a5-a505-fac6a58913b8"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 324, DateTimeKind.Local).AddTicks(9880),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Phú Bình",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "0c010fa8-25ef-4801-8b2e-470404c50538"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 324, DateTimeKind.Local).AddTicks(9883),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Phú Hòa",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "de6809c0-7298-48a2-aa7e-c3810b9ec5a6"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 324, DateTimeKind.Local).AddTicks(9893),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Phú Thuận",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "b4e6949b-8e22-40b4-8212-47c32f69682e"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 324, DateTimeKind.Local).AddTicks(9896),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Tây Lộc",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "163b8b16-3755-4ce4-a30f-a70623d69e42"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(63),
                            CreateUserId = "system",
                            DistrictId = 2,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Hòa Khánh Bắc",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "9e5ca7bb-9a80-469d-b9a7-f98f7143fdf3"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(66),
                            CreateUserId = "system",
                            DistrictId = 2,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Hòa Khánh Nam",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "eae624bb-cfe7-44e2-b59f-ac8a65f9e04d"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Configuration.Setting", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreateUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ModifyUserId");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<string>("UpdatedToken");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = "294b3061-f1a4-409b-ace2-51aec60fce8c",
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 328, DateTimeKind.Local).AddTicks(5441),
                            CreateUserId = "system",
                            IsDeleted = false,
                            Name = "Company",
                            UpdatedToken = "b6281892-e895-49fc-ade8-64b1840b50d7",
                            Value = "{\"Brand\":\"GIẶT SẠCH\",\"Logo\":\"https://i.imgur.com/1CXl1BP.png\",\"Name\":\"Công Ty TNHH Thương Mại Công Nghệ GIAT SACH\",\"Address\":\"201/2, Lê Văn Việt, Quận 9, Hồ Chí Minh\",\"Email\":\"giatsach.vn@outlook.com\",\"Phone\":\"0866.667.670\",\"Website\":\"giatsach.vn\",\"Copyright\":\"<h4>Copyright © 2019 GiatSach</h4>\",\"Facebook\":\"https://www.facebook.com/giatsach.vn\",\"Instagram\":\"https://www.instagram.com/giatsach.vn\",\"Youtube\":\"https://www.youtube.com/giatsach.vn\",\"AppStore\":\"https://www.facebook.com/giatsach.vn\",\"GooglePlay\":\"https://www.facebook.com/giatsach.vn\",\"GoogleMap\":\" \"}"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<int?>("Combo");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description");

                    b.Property<bool>("Highlight");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Combo");

                    b.ToTable("Item");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Combo = 10,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 329, DateTimeKind.Local).AddTicks(1623),
                            CreateUserId = "system",
                            Description = "<ul class=\"content\"><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li></ul>",
                            Highlight = false,
                            IsDeleted = false,
                            Name = "Giặt thường 1",
                            SortOrder = 1,
                            Type = "Laundry",
                            UpdatedToken = "5ca2798f-bd10-475b-9fe5-12e67687b638"
                        },
                        new
                        {
                            Id = 2,
                            Combo = 11,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 329, DateTimeKind.Local).AddTicks(1664),
                            CreateUserId = "system",
                            Description = "<ul class=\"content\"><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li></ul>",
                            Highlight = false,
                            IsDeleted = false,
                            Name = "Giặt thường 2",
                            SortOrder = 1,
                            Type = "Laundry",
                            UpdatedToken = "b92b098a-89f8-4900-a419-3f34d31ed5f8"
                        },
                        new
                        {
                            Id = 3,
                            Combo = 12,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 329, DateTimeKind.Local).AddTicks(1671),
                            CreateUserId = "system",
                            Description = "<ul class=\"content\"><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li><li class=\"checked\"><span class=\"icon\"><i class=\"fa fa-check\"></i></span><divclass=\"text\">Unlimited private questions and answers</div></li></ul>",
                            Highlight = false,
                            IsDeleted = false,
                            Name = "Giặt thường 3",
                            SortOrder = 1,
                            Type = "Laundry",
                            UpdatedToken = "677f5aa4-d899-493e-a8b5-35761e30ff66"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Method", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description");

                    b.Property<bool>("EnableDiscount");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Method");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(9734),
                            CreateUserId = "system",
                            Description = "Giặt hấp",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Giặt hấp",
                            SortOrder = 1,
                            Type = "Clean",
                            UpdatedToken = "cabe444e-61fd-4d9d-a59f-23d061f10fc5"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(9772),
                            CreateUserId = "system",
                            Description = "Giặt sấy",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Giặt sấy",
                            SortOrder = 1,
                            Type = "Clean",
                            UpdatedToken = "5afeb209-f680-4fd3-a5fe-1e2c97d1d633"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(9782),
                            CreateUserId = "system",
                            Description = "Chỉ giặt",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Chỉ giặt",
                            SortOrder = 1,
                            Type = "Clean",
                            UpdatedToken = "1a3e923a-2ccc-40bb-962f-852bb9e6e798"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(9785),
                            CreateUserId = "system",
                            Description = "Chỉ sấy",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Chỉ sấy",
                            SortOrder = 1,
                            Type = "Dry",
                            UpdatedToken = "d774970e-a748-4879-a128-3df6d91b6f4c"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(9788),
                            CreateUserId = "system",
                            Description = "Comfort",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Comfort",
                            SortOrder = 1,
                            Type = "Soft",
                            UpdatedToken = "16acfce0-ff3a-441a-8090-38067ba88cb3"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(9795),
                            CreateUserId = "system",
                            Description = "Downy",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Downy",
                            SortOrder = 1,
                            Type = "Soft",
                            UpdatedToken = "4ac1ab02-6f9d-4159-a404-fd63ee70f285"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(9798),
                            CreateUserId = "system",
                            Description = "Ủi hơi nước miển phí",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Ủi hơi nước miển phí",
                            SortOrder = 1,
                            Type = "Straight",
                            UpdatedToken = "23ca4023-add4-482d-aa08-002ceaae5c7b"
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(9801),
                            CreateUserId = "system",
                            Description = "<strong> Phí: </strong> 10.000đ <small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "7h - 11h",
                            SortOrder = 1,
                            Type = "Delivery",
                            UpdatedToken = "349520fd-ae93-4c04-81cb-12c4cd20a12f"
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(9805),
                            CreateUserId = "system",
                            Description = "<strong> Phí: </strong> 10.000đ <small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "13h - 15h",
                            SortOrder = 1,
                            Type = "Delivery",
                            UpdatedToken = "bf5489e3-97b0-4a7f-88d4-d54417320163"
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(9811),
                            CreateUserId = "system",
                            Description = "<strong>10.000đ <small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "3kg / 1 lần giặt",
                            SortOrder = 1,
                            Type = "Delivery",
                            UpdatedToken = "41ca71b2-d494-4075-9d9e-27932012b6e2"
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(9821),
                            CreateUserId = "system",
                            Description = "<strong>Miễn phí vận chuyển </strong><small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "5kg / 1 lần giặt",
                            SortOrder = 1,
                            Type = "Combo",
                            UpdatedToken = "0d7a8624-3b46-4500-8255-55e647d200b4"
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2019, 9, 10, 14, 25, 30, 325, DateTimeKind.Local).AddTicks(9824),
                            CreateUserId = "system",
                            Description = "<strong>Miễn phí vận chuyển</strong>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "10kg / 1 lần giặt",
                            SortOrder = 1,
                            Type = "Combo",
                            UpdatedToken = "5185f7f6-7d20-4043-8a9a-ff0c23855800"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Discount");

                    b.Property<decimal>("DiscountRate");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemId");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<byte>("Priority");

                    b.Property<decimal>("Rate");

                    b.Property<byte>("Tax");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateOfReceipt");

                    b.Property<int>("DistrictId");

                    b.Property<string>("DistrictName");

                    b.Property<string>("FullName");

                    b.Property<string>("HoursOfReceipt");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("OrderCode");

                    b.Property<string>("Phone");

                    b.Property<int>("ProvinceId");

                    b.Property<string>("ProvinceName");

                    b.Property<string>("Street");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("WardId");

                    b.Property<string>("WardName");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MethodId");

                    b.Property<string>("MethodName");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("OrderId");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.RoleClaim", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.User", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserClaim", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserLogin", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserRole", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserToken", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.District", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Common.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Ward", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Common.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Item", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Items.Method", "Method")
                        .WithMany("Items")
                        .HasForeignKey("Combo");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.Order", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.OrderDetail", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Orders.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");
                });
#pragma warning restore 612, 618
        }
    }
}
