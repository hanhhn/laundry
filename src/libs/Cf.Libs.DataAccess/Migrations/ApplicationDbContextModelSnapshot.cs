// <auto-generated />
using System;
using Cf.Libs.DataAccess.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cf.Libs.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime>("LastPasswordChanged");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserProfileId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("UserProfileId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("RoleId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Billing.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreateUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ModifyUserId");

                    b.Property<string>("Note");

                    b.Property<string>("UpdatedToken");

                    b.HasKey("Id");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Billing.BillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreateUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ModifyUserId");

                    b.Property<string>("Note");

                    b.Property<string>("UpdatedToken");

                    b.HasKey("Id");

                    b.ToTable("BillDetails");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Billing.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreateUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ModifyUserId");

                    b.Property<string>("Note");

                    b.Property<string>("UpdatedToken");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Billing.InvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreateUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ModifyUserId");

                    b.Property<string>("Note");

                    b.Property<string>("UpdatedToken");

                    b.HasKey("Id");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("District");

                    b.Property<int>("DistrictId");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Phone");

                    b.Property<string>("Province");

                    b.Property<int>("ProvinceId");

                    b.Property<string>("Street");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ward");

                    b.Property<int>("WardId");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Prefix");

                    b.Property<int>("ProvinceId");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 454, DateTimeKind.Local).AddTicks(2209),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Huế",
                            Prefix = "Tp",
                            ProvinceId = 1,
                            SortOrder = 1,
                            UpdatedToken = "bfd0d75f-04ad-410c-be5e-3fd194499293"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 454, DateTimeKind.Local).AddTicks(3672),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Liên Chiểu",
                            Prefix = "Quận",
                            ProvinceId = 2,
                            SortOrder = 1,
                            UpdatedToken = "7a0a25f5-d90d-4a21-b832-dc3e17c22d65"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Prefix");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 452, DateTimeKind.Local).AddTicks(2435),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Huế",
                            Prefix = "",
                            SortOrder = 1,
                            UpdatedToken = "f62dc66f-52bd-43a0-b280-391855ee3fca"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 454, DateTimeKind.Local).AddTicks(3637),
                            CreateUserId = "system",
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Đà Nẵng",
                            Prefix = "",
                            SortOrder = 1,
                            UpdatedToken = "9a2b4336-b35a-42f2-a206-de29b4773fbd"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DistrictId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Prefix");

                    b.Property<int>("SortOrder");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Ward");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 454, DateTimeKind.Local).AddTicks(3438),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "An Hòa",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "6c2608f8-19cf-44a6-a870-a3eed4b5acf7"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 454, DateTimeKind.Local).AddTicks(3470),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Phú Bình",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "0d0992cd-4743-4ffa-abbc-ce9f9f3b8fb8"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 454, DateTimeKind.Local).AddTicks(3477),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Phú Hòa",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "cb505b5a-3690-4390-aaf1-ff7f57623881"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 454, DateTimeKind.Local).AddTicks(3480),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Phú Thuận",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "ff4d087a-8d30-48c6-aab3-18cc7db6ebe2"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 454, DateTimeKind.Local).AddTicks(3489),
                            CreateUserId = "system",
                            DistrictId = 1,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Tây Lộc",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "c3ad04e6-ee9b-46cc-9e9a-b5e284073538"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 454, DateTimeKind.Local).AddTicks(3685),
                            CreateUserId = "system",
                            DistrictId = 2,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Hòa Khánh Bắc",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "8107539f-fdc8-4dc7-b4d2-89d800dfe405"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 454, DateTimeKind.Local).AddTicks(3688),
                            CreateUserId = "system",
                            DistrictId = 2,
                            IsDeleted = false,
                            IsPublished = true,
                            Name = "Hòa Khánh Nam",
                            Prefix = "Phường",
                            SortOrder = 1,
                            UpdatedToken = "3ac6dbd5-fd5f-41a9-84d2-b74d7d9057aa"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Configuration.Setting", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CreateUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ModifyUserId");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<string>("UpdatedToken");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = "5c69194a-7309-48a8-9210-9232d8e0240d",
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 455, DateTimeKind.Local).AddTicks(9788),
                            CreateUserId = "system",
                            IsDeleted = false,
                            Name = "Company",
                            UpdatedToken = "5581b913-d793-493c-8344-ca911c23f5f3",
                            Value = "{\"Brand\":\"GIẶT SẠCH\",\"Logo\":\"https://i.imgur.com/1CXl1BP.png\",\"Name\":\"Công Ty TNHH Thương Mại Công Nghệ GIAT SACH\",\"Address\":\"201/2, Lê Văn Việt, Quận 9, Hồ Chí Minh\",\"Email\":\"giatsach.vn@outlook.com\",\"Phone\":\"0866.667.670\",\"Website\":\"giatsach.vn\",\"Copyright\":\"<h4>Copyright © 2019 GiatSach</h4>\",\"Facebook\":\"https://www.facebook.com/giatsach.vn\",\"Instagram\":\"https://www.instagram.com/giatsach.vn\",\"Youtube\":\"https://www.youtube.com/giatsach.vn\",\"AppStore\":\"https://www.facebook.com/giatsach.vn\",\"GooglePlay\":\"https://www.facebook.com/giatsach.vn\",\"GoogleMap\":\" \"}"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Delivery");

                    b.Property<string>("Description");

                    b.Property<bool>("Highlight");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Delivery");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Method", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description");

                    b.Property<bool>("EnableDiscount");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Method");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 455, DateTimeKind.Local).AddTicks(3526),
                            CreateUserId = "system",
                            Description = "Giặt hấp",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Giặt hấp",
                            SortOrder = 1,
                            Type = "Clean",
                            UpdatedToken = "0ce446fb-8efb-42f9-bf00-71736cfb4a7d"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 455, DateTimeKind.Local).AddTicks(3626),
                            CreateUserId = "system",
                            Description = "Giặt sấy",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Giặt sấy",
                            SortOrder = 1,
                            Type = "Clean",
                            UpdatedToken = "3d7300fe-5879-4cbd-82f8-22a29f021d9c"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 455, DateTimeKind.Local).AddTicks(3632),
                            CreateUserId = "system",
                            Description = "Chỉ giặt",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Chỉ giặt",
                            SortOrder = 1,
                            Type = "Clean",
                            UpdatedToken = "dc2abbfe-14f0-47b8-a677-ff781e68d757"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 455, DateTimeKind.Local).AddTicks(3642),
                            CreateUserId = "system",
                            Description = "Chỉ sấy",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Chỉ sấy",
                            SortOrder = 1,
                            Type = "Dry",
                            UpdatedToken = "21297534-2294-4771-a2bd-120b9985941c"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 455, DateTimeKind.Local).AddTicks(3648),
                            CreateUserId = "system",
                            Description = "Comfort",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Comfort",
                            SortOrder = 1,
                            Type = "Soft",
                            UpdatedToken = "75c0a624-f84f-4851-9708-2cccf41ac47d"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 455, DateTimeKind.Local).AddTicks(3651),
                            CreateUserId = "system",
                            Description = "Downy",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Downy",
                            SortOrder = 1,
                            Type = "Soft",
                            UpdatedToken = "9f15dacf-2695-4f74-9923-7c59e5ba448c"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 455, DateTimeKind.Local).AddTicks(3655),
                            CreateUserId = "system",
                            Description = "Ủi hơi nước miển phí",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "Ủi hơi nước miển phí",
                            SortOrder = 1,
                            Type = "Straight",
                            UpdatedToken = "83072092-a975-409f-974f-16e1f7aa5a95"
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 455, DateTimeKind.Local).AddTicks(3658),
                            CreateUserId = "system",
                            Description = "<strong> Phí: </strong> 10.000đ <small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "7h - 11h",
                            SortOrder = 1,
                            Type = "Delivery",
                            UpdatedToken = "569a1ca0-9d41-4d9d-aa8e-83e00851b864"
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 455, DateTimeKind.Local).AddTicks(3661),
                            CreateUserId = "system",
                            Description = "<strong> Phí: </strong> 10.000đ <small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "13h - 15h",
                            SortOrder = 1,
                            Type = "Delivery",
                            UpdatedToken = "61ce950a-1d6a-463f-8d99-327fa677eb3d"
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 455, DateTimeKind.Local).AddTicks(3664),
                            CreateUserId = "system",
                            Description = "<strong>10.000đ <small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "3kg / 1 lần giặt",
                            SortOrder = 1,
                            Type = "Delivery",
                            UpdatedToken = "fdf4465a-5d41-4572-810e-7396639d91b8"
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 455, DateTimeKind.Local).AddTicks(3671),
                            CreateUserId = "system",
                            Description = "<strong>Miễn phí vận chuyển </strong><small>(dưới 5km)</small>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "5kg / 1 lần giặt",
                            SortOrder = 1,
                            Type = "Delivery",
                            UpdatedToken = "8c1814b5-77d9-4009-9e14-841c12b69a9d"
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2019, 9, 10, 13, 17, 21, 455, DateTimeKind.Local).AddTicks(3674),
                            CreateUserId = "system",
                            Description = "<strong>Miễn phí vận chuyển</strong>",
                            EnableDiscount = false,
                            IsDeleted = false,
                            Name = "10kg / 1 lần giặt",
                            SortOrder = 1,
                            Type = "Delivery",
                            UpdatedToken = "7644f17a-68ad-4994-bcfc-0fd123704a36"
                        });
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Discount");

                    b.Property<decimal>("DiscountRate");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemCode");

                    b.Property<int>("ItemId");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<byte>("Priority");

                    b.Property<decimal>("Rate");

                    b.Property<byte>("Tax");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateOfReceipt");

                    b.Property<int>("DistrictId");

                    b.Property<string>("DistrictName");

                    b.Property<string>("FullName");

                    b.Property<string>("HoursOfReceipt");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("OrderCode");

                    b.Property<string>("Phone");

                    b.Property<int>("ProvinceId");

                    b.Property<string>("ProvinceName");

                    b.Property<string>("Street");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("WardId");

                    b.Property<string>("WardName");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MethodId");

                    b.Property<string>("MethodName");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("ModifyUserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("OrderId");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedToken")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.RoleClaim", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.User", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserClaim", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserLogin", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserRole", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Account.UserToken", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Account.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.District", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Common.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Common.Ward", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Common.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Items.Item", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Items.Method", "Method")
                        .WithMany("Items")
                        .HasForeignKey("Delivery")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.Order", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cf.Libs.DataAccess.Entities.Orders.OrderDetail", b =>
                {
                    b.HasOne("Cf.Libs.DataAccess.Entities.Orders.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");
                });
#pragma warning restore 612, 618
        }
    }
}
